<?php

declare(strict_types = 1);

namespace AvtoDev\ExtendedLaravelValidator\Extensions;

use Illuminate\Support\Str;
use AvtoDev\ExtendedLaravelValidator\AbstractValidatorExtension;

/**
 * Правило валидации ГРЗ-номеров.
 *
 * "ГОСТ Р 50577-93" для использования на знаках разрешены 12 букв кириллицы, имеющие графические аналоги в
 * латинском алфавите — А, В, Е, К, М, Н, О, Р, С, Т, У и Х.
 *
 * Так же ГРЗ-номера бывают следующих видов:
 *  - М000ММ77 или М000ММ777 (тип 1 - Для легковых, грузовых, грузопассажирских ТС и автобусов)
 *  - М000ММ (тип 1А - Для легковых ТС должностных лиц)
 *  - ММ00077 (тип 1Б - Для легковых ТС, исп. для перевозки людей на коммерческой основе, автобусов)
 *  - ММ00077 (тип 2 - Для автомобильных прицепов и полуприцепов)
 *  - 0000ММ77 (тип 3 - Для тракторов, самоходных дорожно-строительных машин и иных машин и прицепов)
 *  - 0000ММ77 (тип 4 - Для мотоциклов, мотороллеров, мопедов)
 *  - 0000ММ77 (тип 5 - Для легковых, грузовых, грузопассажирских автомобилей и автобусов)
 *  - ММ000077 (тип 6 - Для автомобильных прицепов и полуприцепов)
 *  - 0000ММ77 (тип 7 - Для тракторов, самоходных дорожно-строительных машин и иных машин и прицепов)
 *  - 0000ММ77 (тип 8 - Для мотоциклов, мотороллеров, мопедов)
 *  - М000077 (тип 20 - Для легковых, грузовых, грузопассажирских автомобилей и автобусов)
 *  - 000М77 (тип 21 - Для автомобильных прицепов и полуприцепов)
 *  - 0000М77 (тип 22 - Для мотоциклов)
 *
 * Где:
 *  - "0" и "М" - соответственно буква или цифра, обозначающие номер и серию регистрационного знака ТС
 *  - "2" - цифра кода, применяемого на регистрационных знаках ТС аккредитованных диплом. представительств, и т.п.
 *  - "7" - цифра кода региона РФ, применяемых на регистрационных знаках ТС
 *
 * Не поддерживаются данным классом:
 *  - 222ММ077 (тип 9 - Для легковых автомобилей дипломатических представительств)
 *  - 222М00077 (тип 10 - Для легковых, грузовых, грузопассажирских автомобилей и автобусов диплом. представительств)
 *  - Транзитные номера
 *
 * @link <http://internet-law.ru/gosts/gost/7327/>
 * @link <http://goo.gl/DS3wnD>
 */
class GrzCodeValidatorExtension extends AbstractValidatorExtension
{
    /**
     * {@inheritdoc}
     */
    public function name(): string
    {
        return 'grz_code';
    }

    /**
     * {@inheritdoc}
     */
    public function passes(string $attribute, $value): bool
    {
        // Статический стек для хранения результатов валидации (для быстродействия)
        static $stack = [];

        // Если значение в стеке уже есть - то просто возвращаем его
        if (! isset($stack[$value])) {
            // Разрешенные кириллические символы
            static $kyr_chars = 'АВЕКМНОРСТУХ';

            // Значение в верхнем регистре
            $uppercase = Str::upper($value);

            // Удаляем все символы, кроме разрешенных
            $cleared = (string) \preg_replace("~[^0-9{$kyr_chars}]~u", '', $uppercase);

            // Вычисляем длину получившейся строки
            $length = Str::length($cleared);

            $stack[$value] = (
                $length >= 6 && $length <= 9 // Проверяем соответствие минимальной и максимальной длине
                && $uppercase === $cleared // После удаления запрещенных символов - значение не изменилось
                && ( // Соответствует ли одному из шаблонов
                    \preg_match("~^[{$kyr_chars}]{1}\d{3}[{$kyr_chars}]{2}\d{2,3}$~iu", $cleared) === 1 // М000ММ77 и М000ММ777
                    || \preg_match("~^[{$kyr_chars}]{1}\d{3}[{$kyr_chars}]{2}$~iu", $cleared) === 1 // М000ММ
                    || \preg_match("~^[{$kyr_chars}]{2}\d{3}\d{2}$~iu", $cleared) === 1 // ММ00077
                    || \preg_match("~^\d{4}[{$kyr_chars}]{2}\d{2}$~iu", $cleared) === 1 // 0000ММ77
                    || \preg_match("~^[{$kyr_chars}]{2}\d{4}\d{2}$~iu", $cleared) === 1 // ММ000077
                    || \preg_match("~^[{$kyr_chars}]{1}\d{4}\d{2}$~iu", $cleared) === 1 // М000077
                    || \preg_match("~^\d{3}[{$kyr_chars}]{1}\d{2}$~iu", $cleared) === 1 // 000М77
                    || \preg_match("~^\d{4}[{$kyr_chars}]{1}\d{2}$~iu", $cleared) === 1 // 0000М77
                )
            );
        }

        return $stack[$value];
    }
}
